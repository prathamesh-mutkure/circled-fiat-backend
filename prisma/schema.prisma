// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  password String @default("")

  apiKey        String  @unique
  walletAddress String
  name          String?
  avatar        String?

  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  fiatPayment    FiatPayment?
  onchainPayment OnchainPayment?

  status TransactionStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FiatPayment {
  id String @id @default(uuid())

  gatewayId    String
  amountPaid   Float
  fiatCurrency String

  transactionId String      @unique
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  status FiatPaymentStatus @default(PENDING)

  paidAt DateTime?
}

model OnchainPayment {
  id     String @id @default(uuid())
  txHash String @unique

  tokenAmount        Float
  conversionCurrency String
  conversionRate     Float

  transactionId String      @unique
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  convertedAt DateTime @default(now())
}

model Tracking {
  id String @id @default(uuid())

  trackingId String @unique
  status     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum FiatPaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
